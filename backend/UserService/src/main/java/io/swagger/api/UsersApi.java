/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.LoginRequest;
import io.swagger.model.LoginToken;
import io.swagger.model.NewUserRequest;
import io.swagger.model.UpdateUserRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-27T23:34:02.379Z")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Validates whether a given token is a valid admin token", nickname = "authenticateAdminToken", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Token is valid admin token"),
        @ApiResponse(code = 405, message = "Invalid token") })
    @RequestMapping(value = "/users/token/validateToken/admin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> authenticateAdminToken(@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginToken body);


    @ApiOperation(value = "Validates whether a given token is valid - primarily for inter-service communication", nickname = "authenticateToken", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Token is valid"),
        @ApiResponse(code = 405, message = "Expired token"),
        @ApiResponse(code = 418, message = "Fake token") })
    @RequestMapping(value = "/users/token/validateToken",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> authenticateToken(@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginToken body);


    @ApiOperation(value = "Delete a user", nickname = "deleteUser", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful user deletion"),
        @ApiResponse(code = 401, message = "Could not delete user"),
        @ApiResponse(code = 405, message = "Invalid token") })
    @RequestMapping(value = "/users/manage",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginToken body);


    @ApiOperation(value = "Create and return user login token based on provided username and password hash", nickname = "getUserToken", notes = "", response = LoginToken.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful login", response = LoginToken.class),
        @ApiResponse(code = 405, message = "Invalid login credentials") })
    @RequestMapping(value = "/users/token/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<LoginToken> getUserToken(@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginRequest body);


    @ApiOperation(value = "Invalidate an existing token - primary use case is logoff.", nickname = "invalidateToken", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful invalidation"),
        @ApiResponse(code = 405, message = "Provided token is already expired"),
        @ApiResponse(code = 418, message = "Fake token") })
    @RequestMapping(value = "/users/token/invalidateToken",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> invalidateToken(@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginToken body);


    @ApiOperation(value = "Create new user", nickname = "newUser", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful user creation"),
        @ApiResponse(code = 401, message = "Invalid account creation arguments") })
    @RequestMapping(value = "/users/manage",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> newUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NewUserRequest body);


    @ApiOperation(value = "ping", nickname = "pingUsers", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ping") })
    @RequestMapping(value = "/users/ping",
        method = RequestMethod.GET)
    ResponseEntity<Void> pingUsers();


    @ApiOperation(value = "Update a user's info", nickname = "updateUser", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful user update"),
        @ApiResponse(code = 401, message = "Invalid user update arguments"),
        @ApiResponse(code = 405, message = "Invalid token") })
    @RequestMapping(value = "/users/manage",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateUserRequest body);

}